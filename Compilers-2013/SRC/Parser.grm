%{
(* SML header, after data types *)

  open AbSyn

%}

%token <Pos> TProgram TEOF
%token <Pos> TFunction TProcedure

%start Prog

%%

(* Program Structure *)

Prog : TProgram TId FunDecs TEOF { $3 }

FunDecs : FunDecs FunDec { $2 : $1 }
        | FunDec         { [ $1 ] }

FunDec : TFunction TId TLParen PDecl TRParen TColon Type Block TSemi { AbSyn.Func ($7, $2, $4, $8, $1) }
       | TProcedure TId TLParen PDecl TRParen Block TSemi            { AbSyn.Proc ($2, $4, $6, $1) }

Block : DBlock SBlock { ($1, $2) }

DBlock : TVar Decs { $2 }
       |           { [] }

SBlock : TBegin StmtSeq TSemi TEnd { $2 }
       | Stmt                      { $1 }

StmtSeq : StmtSeq TSemi Stmt 
        | Stmt

(* Variable and Parameter Declarations, Types *)

PDecl : Params { $1 }
      |        { [] }

Params : Params TSemi Dec { $3 : $1 }
       | Dec              { $1 }

Dec : TId TColon Type

Decs : Decs Dec TColon { $2 : $1 }
     | Dec TColon { $1 }

Type : TInt
     | TChar
	 | TBool
	 | TArray TOf Type

(* Statements *)

Stmt : TId TLParen CallParams TRParen
     | TIf Exp TThen Block
	 | TIf Exp TThen Block TElse Block
	 | TWhile Exp TDo Blcok
	 | TReturn Ret
	 | LVal TAssign Exp

(* Function and Procedure Parameters and Index Lists *)

CallParams : Exps { $1 }
           |      { [] }

Exps : Exp TComma Exps { $1 : $3 }
     | Exp             { $1 }

(* L-Values and Expressions *)

LVal : TId
     | TId TLBracket Exps TRBracket

Ret : Exp { $1 }
    |     { [] }

Exp : NumLit
    | LogicLit
	| CharLit
	| StringLit
	| TLBracket Exps TRBracket
	| LVal
	| TNot Exp
	| Exp OP Exp
	| TLParen Exp TRParen
	| TId TLParen CallParams TRParen

OP : TPlus
   | TMinus
   | TTimes
   | TSlash
   | TEq
   | TLess
   | TAnd
   | TOr

%%

(* SML trailer, often empty *)
